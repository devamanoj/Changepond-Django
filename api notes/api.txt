Application Programming Interface(API)
An API is a software intermediary that allows two or more application to talk to each other.
API :
Private: It can be used within the organization
Partner : It can be used within Bussiness Partners
Public : It can be used any third party developers
 
WEB API:
An API, which is interface for web is called as web API (request and response)
How web API works:
Client makes HTTP request to API
API will communicate to web application/Database
API returns Data to client
 
REST:
Architectural guideline to develop web API
API developed using REST is known as REST API/RESTful API
API :
API is nothing but URL which we can integrate into any frontend application
when we hit the url along with some parameters and request method then it will return expected response
CRUD OPERATIONs:
GET METHOD : To fetch the data(Http request method)
POST: To add the data
GET(id) :Specific data fetch
PUT: To update all fields
PATCH : To update sepcific field
DELETE : Specific field delete
 
React(axios)

Relationship, image , user , customized user - syllabus

https://pypi.org/project/drf-yasg/#b-schemaview-options

https://drf-yasg.readthedocs.io/en/stable/settings.html- settings.html

https://www.django-rest-framework.org/ - django rest framework documentation

https://pypi.org/project/drf-yasg/#c-swagger-settings-and-redoc-settings- configuration settings

from rest_framework.exceptions import APIException
from rest_framework.response import Response
from rest_framework import status
 
# Create your views here.
class AuthorViewset(ModelViewSet):
    queryset = Author.objects.all()
    serializer_class = AuthorSerializer
 
    def get_serializer_class(self):
        if self.action == 'list':
            return AuthorSerializer
        return self.serializer_class
 
#get all authors
    def list(self,request):
        try:
            author_objs = Author.objects.all()
            serializer = self.get_serializer(author_objs,many=True)
            return Response({
                'status': status.HTTP_200_OK,
                'data':serializer.data
            })
 
        except Exception as e:
            print(e)
            raise APIException({
                'message':APIException.default_detail,
                'status':APIException.status.code
            })